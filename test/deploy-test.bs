import bluebird as Bluebird
import chai: expect
import mock-spawn as mSpawn
import redis

import ../config

spawn = mSpawn()
require('child_process').spawn = spawn
Deployment = require('../deploy')

Bluebird.promisifyAll(redis)
spawn.setDefault(spawn.simple(0, 'deploying all the things'))

client = redis.createClient()


describe('Deployment', () ->
  deployment = null

  beforeEach(() ->
    deployment = new Deployment('chewie', { source: 'tests' })
  )

  describe('.init()', () ->
    it('should set stdout to ""', () -> expect(deployment.stdout).to.equal(''))

    it('should set stderr to ""', () -> expect(deployment.stderr).to.equal(''))

    it('should set variables from arguments', () ->
      expect(deployment.project).to.equal('chewie')
      expect(deployment.options.source).to.equal('tests')
    )
  )
  describe('.run()', () ->
    beforeEach(() ->
      deployment = new Deployment('src', { source: 'tests' })
    )

    it('should run the test', (done) ->
      deployment.on('done', () -> done())
      deployment.run()
    )

    it('should emit stdout', (done) ->
      stdout = ''
      deployment.on('stdout', (data) -> stdout += data)
      deployment.on('done', () ->
        expect(deployment.stdout).to.equal('deploying all the things')
        expect(stdout).to.equal('deploying all the things')
        done()
      )
      deployment.run()
    )

    it('should emit stderr', (done) ->
      spawn.sequence.add(spawn.simple(1, '', 'All the errors'))
      stderr = ''
      deployment.on('stderr', (data) -> stderr += data)
      deployment.on('done', (success) ->
        expect(deployment.stderr).to.equal('All the errors')
        expect(stderr).to.equal('All the errors')
        expect(success).to.be.false
        done()
      )
      deployment.run()
    )

    it('should report failure if the command failed', (done) ->
      spawn.sequence.add(spawn.simple(1, '', ''))
      deployment = new Deployment('chewie', { source: 'tests' })
      deployment.on('done', (success) ->
        expect(success).to.be.false
        done()
      )
      deployment.run()
    )
  )
  describe('.commit()', () ->
    it('should return commit hash from deployment log', () ->
      deployment.stdout = 'HEAD is now at 51567bd Add npm install as frigg task'
      expect(deployment.commit()).to.equal('51567bd')
    )
  )

  describe('.report()', () ->
    it('should save project status in redis', (done) ->
      deployment.stdout = 'HEAD is now at 51567bd Add npm install as frigg task'
      deployment.report()
        .then(client.selectAsync(3))
        .then(() ->
          client.hget('chewie:projects', 'chewie', (err, value) ->
            if err then done(err)
            value = JSON.parse(value)
            expect(value.commit).to.equal('51567bd')
            expect(value.timestamp).to.be.truthy
            done()
          )
        )
    )
  )
)
