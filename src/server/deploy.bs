import child_process as child
import bluebird as Promise

export {
  deployRegular: deployRegular
  deployStream: deployStream
}

child_process = Promise.promisifyAll(child)

python = '#{process.cwd()}/venv/bin/python'
deployScript = '#{process.cwd()}/deploy.py'

shortOutput = 'Done!'

class DeployError extends Error
  name: 'DeployError'

  init: (message) ->
    @message = message


deployStream = (projectName) ->
  return child_process.spawn(python, [deployScript, projectName])

deployRegular = (projectName, debug) ->
  return child_process.execAsync('#{python} #{deployScript} #{projectName}')
  .spread((stdout, stderr) ->
    if stderr
      throw new DeployError(stderr)
    return debug ? stdout : shortOutput
  , (err) ->
    throw new DeployError(err.message)
  )
