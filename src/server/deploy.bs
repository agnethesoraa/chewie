import child_process as child
import bluebird as Promise
import eventemitter3 as EventEmitter
import ./notify: notifySuccess, notifyError

export Deployment

child_process = Promise.promisifyAll(child)


class Deployment extends EventEmitter
  python: '#{process.cwd()}/venv/bin/python'
  deployScript: '#{process.cwd()}/deploy.py'

  init: (project, options) ->
    @stdout = ''
    @stderr = ''
    @success = null
    @project = project
    @options = options or {}

  run: () ->
    proc = child_process.spawn(@python, [@deployScript, @project])
    proc.stdout.setEncoding('utf8')
    proc.stderr.setEncoding('utf8')

    proc.stdout.on('data', (data) ->
      @@stdout += data
      @@emit('stdout', data)
    )

    proc.stderr.on('data', (data) ->
      @@stderr += data
      @@emit('stderr', data)
    )

    proc.on('close', (code) ->
      @@success = code == 0
      @@emit('done', @@success)
      @@notify()
    )

  notify: () ->
    if @success
      notifySuccess(@project, @options.source)
    else
      notifyError(@project, @options.source, @stderr)
