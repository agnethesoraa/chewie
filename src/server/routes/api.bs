import express
import crypto

import ../config
import ../deploy as Deployment
import ./handle-error as handleError
import ./auth-helpers as authHelpers: isAuthenticated

export router

router = express.Router()

router.post('/github', (req, res) ->
  payload = req.body
  signature = req.headers['x-hub-signature']
  hmac = crypto.createHmac('sha1', config.HOOK_TOKEN)
  hmac.setEncoding('hex')
  hmac.write(JSON.stringify(payload))
  hmac.end()

  correct = 'sha1=' + hmac.read()

  if signature == correct
    response = {
      status: 200
    }

    if req.headers['x-github-event'] != 'status'
      response.error = messages.notStatusEvent
      res.status(200).json(response)
    elif payload.state != 'success'
      response.error = messages.notSuccess
      res.status(200).json(response)
    elif payload.branches[0].name != 'master'
      response.error = messages.notMaster
      res.status(200).json(response)
    else
      deployAndHandle(payload.repository.name, true, res)
  else
    res
      .status(403)
      .json({
        status: 403
        error: 'Invalid hook signature.'
      })
)

messages = {
  notMaster: 'Received hook from a different branch than master, nothing will be done.'
  notStatusEvent: 'Not a status event, nothing will be done.'
  notSuccess: 'State is not success, nothing will be done.'
}

deployAndHandle = (project, debug, res) ->
  deployment = new Deployment(project, { debug: debug source: 'webhook' })
  deployment.on('done', (success) ->
    if success
      res.json({
        status: 200
        output: deployment.stdout 
      })
    else
      handleError(deployment.error, res)
  )
  deployment.run()
